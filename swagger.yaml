swagger: '2.0'
info:
  description: >-
    Defines the API available for hrv-social users to interact with groups,
    users and messages
  version: 1.0.0
  title: hrv-social
  contact:
    email: admin-list@example.com
host: <hostname>.execute-api.<region>.amazonaws.com
basePath: /Test
schemes:
  - https
tags:
  - name: groups
    description: Everything about groups
  - name: users
    description: Everything about users
consumes:
  - application/json
produces:
  - application/json
paths:
  /group/members:
    get:
      tags:
        - groups
      summary: Get all of the members of the group the caller belongs to. (Or, for admins, any group.)
      description: ''
      operationId: getGroupMembers
      parameters:
        - in: query
          name: group_name
          type: string
          required: false
          description: Name of the group whose members you want. If the caller is neither an admin nor a member of the group the response will be 401 Unauthorized.
      responses:
        '200':
          description: Expected response
          schema:
            $ref: '#/definitions/UserList'
        '400':
          description: Bad request error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - basic-user: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: >-
          arn:aws:apigateway:<region>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region>:<account_id>:function:<function_name>/invocations
        credentials: 'arn:aws:iam::<account_id>:role/api-gateway-lambda-and-logs'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    options:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /group/messages:
    get:
      tags:
        - groups
      summary: Get all of the messages for the group the caller belongs to. (Or, for admins, any group.)
      description: ''
      operationId: getGroupMessages
      parameters:
        - in: query
          name: group_name
          type: string
          required: false
          description: Name of the group whose messages you want. If the caller is neither an admin nor a member of the group the response will be 401 Unauthorized.
      responses:
        '200':
          description: Expected response
          schema:
            $ref: '#/definitions/GroupMessageList'
        '400':
          description: Bad request error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - basic-user: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: >-
          arn:aws:apigateway:<region>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region>:<account_id>:function:<function_name>/invocations
        credentials: 'arn:aws:iam::<account_id>:role/api-gateway-lambda-and-logs'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    options:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
    post:
      tags:
        - groups
      summary: Create a new message for the group the caller belongs to. (Of, for admins, any group.)
      description: ''
      operationId: createGroupMessage
      parameters:
        - in: body
          name: message
          description: The message to send to the group
          schema:
            $ref: '#/definitions/GroupMessage'
        - in: query
          name: group_name
          type: string
          required: false
          description: The name of the group you wish to post a message to. Only admins may post to groups they are not a member of - anyone else will receive a 401 Unauthorized response.
      responses:
        '201':
          description: Created successfully
          schema:
            $ref: '#/definitions/GroupMessage'
        '400':
          description: Bad request error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - basic-user: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '201'
        uri: >-
          arn:aws:apigateway:<region>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region>:<account_id>:function:<function_name>/invocations
        credentials: 'arn:aws:iam::<account_id>:role/api-gateway-lambda-and-logs'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
  '/users/{user_id}':
    get:
      tags:
        - users
      summary: Get the details for a given user
      description: ''
      operationId: getUser
      parameters:
        - in: path
          name: user_id
          type: string
          required: true
          description: id of the user to fetch
      responses:
        '200':
          description: Expected response
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad request error
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - basic-user: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: >-
          arn:aws:apigateway:<region>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region>:<account_id>:function:<function_name>/invocations
        credentials: 'arn:aws:iam::<account_id>:role/api-gateway-lambda-and-logs'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
  '/users/messages/{user_id}':
    get:
      tags:
        - users
      summary: Get the messages between the user making the call and user_id
      description: ''
      operationId: getUserMessages
      parameters:
        - in: path
          name: user_id
          type: string
          description: >-
            The id of the user whose correspondence with the caller should be
            fetched
          required: true
      responses:
        '200':
          description: Expected response
          schema:
            $ref: '#/definitions/UserMessageList'
        '400':
          description: Bad request error
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - basic-user: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: >-
          arn:aws:apigateway:<region>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region>:<account_id>:function:<function_name>/invocations
        credentials: 'arn:aws:iam::<account_id>:role/api-gateway-lambda-and-logs'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    post:
      summary: Send a message from the user making the call to another user
      tags:
        - users
      description: ''
      operationId: createUserMessage
      parameters:
        - in: path
          name: user_id
          description: The id of the message recipient
          type: string
          required: true
        - in: body
          name: message
          description: The message to send to the user
          required: true
          schema:
            $ref: '#/definitions/UserMessage'
      responses:
        '201':
          description: Created successfully
          schema:
            $ref: '#/definitions/GroupMessage'
        '400':
          description: Bad request error
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - basic-user: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '201'
        uri: >-
          arn:aws:apigateway:<region>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region>:<account_id>:function:<function_name>/invocations
        credentials: 'arn:aws:iam::<account_id>:role/api-gateway-lambda-and-logs'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
  '/users/roles':
    get:
      tags:
        - users
      summary: Returns a list of the security roles the calling user holds.
      description: >-
        The list may be empty if the user is not assigned any particular roles.
        Note that these are not necessarily AWS IAM roles - they might be Cognito user pool groups or anything
        else the implementation defines.
      operationId: getUserRoles
      responses:
        '200':
          description: Expected response
          schema:
            $ref: '#/definitions/UserRoleList'
        '400':
          description: Bad request error
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - basic-user: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: >-
          arn:aws:apigateway:<region>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region>:<account_id>:function:<function_name>/invocations
        credentials: 'arn:aws:iam::<account_id>:role/api-gateway-lambda-and-logs'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
securityDefinitions:
  basic-user:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      providerARNs:
        - 'arn:aws:cognito-idp:<region>:<account_id>:userpool/<pool_id>'
      type: cognito_user_pools
definitions:
  Empty:
    type: object
  Error:
    type: object
    properties:
      message:
        type: string
    required:
      - message
  GroupMessage:
    type: object
    properties:
      id:
        type: string
      group_id:
        type: string
      date:
        type: string
        format: date-time
      from_id:
        type: string
        description: id of the user who sent the message
      body:
        type: string
    required:
      - body
  GroupMessageList:
    type: array
    items:
      $ref: '#/definitions/GroupMessage'
  User:
    type: object
    properties:
      id:
        type: string
      group:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
        description: "If this is empty or not provided, phone must be set."
      phone:
        type: string
        description: "If this is empty or not provided, email must be set."
      photoUrl:
        type: string
    required:
      - id
      - group
      - first_name
      - last_name
      - photoUrl
  UserList:
    type: array
    items:
      $ref: '#/definitions/User'
  UserMessage:
    type: object
    properties:
      id:
        type: string
      to_id:
        type: string
        description: id of the message recipient
      date:
        type: string
        format: date-time
      from_id:
        type: string
        description: id of the user who sent the message
      body:
        type: string
    required:
      - to_id
      - body
  UserMessageList:
    type: array
    items:
      $ref: '#/definitions/UserMessage'
  UserRoleList:
    type: array
    items:
      type: string
